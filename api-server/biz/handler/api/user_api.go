// Code generated by hertz generator.

package api

import (
	"context"
	"github.com/cloudwego/kitex/client"
	"mini-tiktok-v2/api-server/biz/mu"
	"mini-tiktok-v2/user-server/kitex_gen/user"
	"mini-tiktok-v2/user-server/kitex_gen/user/userservice"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	api "mini-tiktok-v2/api-server/biz/model/api"
)

// UserRegister .
// @router /douyin/user/register/ [POST]
func UserRegister(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.UserRegisterRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		panic(nil)
	}

	userClient, err := userservice.NewClient("user", client.WithHostPorts("0.0.0.0:8888"))
	if err != nil {
		panic(nil)
	}

	reqRpc := &user.UserRegisterRequest{
		Username: req.Username,
		Password: req.Password,
	}

	respRpc, err := userClient.UserRegister(ctx, reqRpc)
	if err != nil {
		panic(err)
	}

	token, _, err := mu.JwtMiddleware.TokenGenerator(req.Username)
	if err != nil {
		panic(err)
	}

	resp := &api.UserRegisterResponse{
		StatusCode: respRpc.StatusCode,
		StatusMsg:  respRpc.StatusMsg,
		UserId:     respRpc.UserId,
		Token:      token,
	}

	c.JSON(consts.StatusOK, resp)
}

// UserLogin .
// @router /douyin/user/login/ [POST]
func UserLogin(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.UserLoginRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		panic(nil)
	}

	userClient, err := userservice.NewClient("user", client.WithHostPorts("0.0.0.0:8888"))
	if err != nil {
		panic(nil)
	}

	reqRpc := &user.UserLoginRequest{
		Username: req.Username,
		Password: req.Password,
	}

	respRpc, err := userClient.UserLogin(ctx, reqRpc)
	if err != nil {
		panic(err)
	}

	token, _, err := mu.JwtMiddleware.TokenGenerator(req.Username)
	if err != nil {
		panic(err)
	}

	resp := &api.UserRLoginResponse{
		StatusCode: respRpc.StatusCode,
		StatusMsg:  respRpc.StatusMsg,
		UserId:     respRpc.UserId,
		Token:      token,
	}

	c.JSON(consts.StatusOK, resp)
}
