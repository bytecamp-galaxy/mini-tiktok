// Code generated by hertz generator.

package api

import (
	"context"
	"github.com/bytecamp-galaxy/mini-tiktok/api-server/biz/mw"
	"github.com/bytecamp-galaxy/mini-tiktok/comment-server/kitex_gen/comment"
	"github.com/bytecamp-galaxy/mini-tiktok/comment-server/kitex_gen/comment/commentservice"
	"github.com/bytecamp-galaxy/mini-tiktok/comment-server/kitex_gen/user"
	"github.com/bytecamp-galaxy/mini-tiktok/pkg/utils"
	"github.com/cloudwego/kitex/client"
	"github.com/kitex-contrib/registry-eureka/resolver"

	api "github.com/bytecamp-galaxy/mini-tiktok/api-server/biz/model/api"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// CommentAction .
// @router /douyin/comment/action/ [POST]
func CommentAction(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.CommentActionRequest

	// step1: bind and validate request.
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(consts.StatusInternalServerError, &api.CommentActionResponse{
			StatusCode: 1,
			StatusMsg:  utils.String(err.Error()),
		})
		return
	}

	// set up connection with comment server
	r := resolver.NewEurekaResolver([]string{"http://localhost:8761/eureka"})
	cli, err := commentservice.NewClient("tiktok.comment.service", client.WithResolver(r))
	if err != nil {
		c.JSON(consts.StatusInternalServerError, &api.CommentActionResponse{
			StatusCode: 1,
			StatusMsg:  utils.String(err.Error()),
		})
		return
	}

	// fetch user_id from token
	id, ok := c.Get(mw.IdentityKey)
	if !ok {
		c.JSON(consts.StatusInternalServerError, &api.CommentActionResponse{
			StatusCode: 1,
			StatusMsg:  utils.String(err.Error()),
		})
		return
	}

	reqRPC := &comment.CommentActionRequest{
		VideoId:     req.VideoId,
		UserId:      id.(int64),
		ActionType:  req.ActionType,
		CommentText: req.CommentText,
		CommentId:   req.CommentId,
	}

	respRPC, err := cli.CommentAction(ctx, reqRPC)
	if err != nil {
		c.JSON(consts.StatusInternalServerError, &api.CommentActionResponse{
			StatusCode: 1,
			StatusMsg:  utils.String(err.Error()),
		})
	}

	if respRPC.StatusCode != 0 {
		c.JSON(consts.StatusInternalServerError, &api.CommentActionResponse{
			StatusCode: respRPC.StatusCode,
			StatusMsg:  utils.String(err.Error()),
		})
	}

	resp := &api.CommentActionResponse{
		StatusCode: 0,
		StatusMsg:  respRPC.StatusMsg,
		Comment:    ConvertCommentModel(respRPC.Comment),
	}

	c.JSON(consts.StatusOK, resp)
}

// CommentList .
// @router /douyin/comment/list [GET]
func CommentList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.CommentListRequest

	// step1: bind and validate request.
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(consts.StatusInternalServerError, &api.CommentActionResponse{
			StatusCode: 1,
			StatusMsg:  utils.String(err.Error()),
		})
		return
	}

	// set up connection with comment server
	r := resolver.NewEurekaResolver([]string{"http://localhost:8761/eureka"})
	cli, err := commentservice.NewClient("tiktok.comment.service", client.WithResolver(r))
	if err != nil {
		c.JSON(consts.StatusInternalServerError, &api.CommentActionResponse{
			StatusCode: 1,
			StatusMsg:  utils.String(err.Error()),
		})
		return
	}

	reqRPC := comment.CommentListRequest{VideoId: req.VideoId}
	respRPC, err := cli.CommentList(ctx, &reqRPC)
	if err != nil {
		c.JSON(consts.StatusInternalServerError, &api.CommentActionResponse{
			StatusCode: 1,
			StatusMsg:  utils.String(err.Error()),
		})
	}

	if respRPC.StatusCode != 0 {
		c.JSON(consts.StatusInternalServerError, &api.CommentActionResponse{
			StatusCode: respRPC.StatusCode,
			StatusMsg:  utils.String(err.Error()),
		})
	}

	list := make([]*api.Comment, len(respRPC.CommentList))

	for i, c := range respRPC.CommentList {
		list[i] = ConvertCommentModel(c)
	}

	resp := &api.CommentListResponse{
		StatusCode:  0,
		CommentList: list,
	}

	c.JSON(consts.StatusOK, resp)
}

func ConvertUserModel(modelRPC *user.User) *api.User {
	return &api.User{
		Id:            modelRPC.Id,
		Name:          modelRPC.Name,
		FollowCount:   &modelRPC.FollowCount,
		FollowerCount: &modelRPC.FollowerCount,
		IsFollow:      modelRPC.IsFollow,
	}
}

func ConvertCommentModel(modelRPC *comment.Comment) *api.Comment {
	return &api.Comment{
		Id:         modelRPC.Id,
		User:       ConvertUserModel(modelRPC.User),
		Content:    modelRPC.Content,
		CreateDate: modelRPC.CreateDate,
	}
}
