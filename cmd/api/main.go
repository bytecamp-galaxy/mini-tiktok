// Code generated by hertz generator.

package main

import (
	"context"
	"fmt"
	"github.com/bytecamp-galaxy/mini-tiktok/cmd/api/biz/jwt"
	"github.com/bytecamp-galaxy/mini-tiktok/pkg/conf"
	"github.com/bytecamp-galaxy/mini-tiktok/pkg/dal"
	"github.com/bytecamp-galaxy/mini-tiktok/pkg/errno"
	"github.com/bytecamp-galaxy/mini-tiktok/pkg/log"
	"github.com/bytecamp-galaxy/mini-tiktok/pkg/snowflake"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/app/middlewares/server/recovery"
	"github.com/cloudwego/hertz/pkg/app/server"
	"github.com/cloudwego/hertz/pkg/app/server/registry"
	"github.com/cloudwego/hertz/pkg/common/hlog"
	"github.com/cloudwego/hertz/pkg/common/utils"
	"github.com/cloudwego/hertz/pkg/network/netpoll"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"github.com/hertz-contrib/gzip"
	"github.com/hertz-contrib/obs-opentelemetry/provider"
	"github.com/hertz-contrib/obs-opentelemetry/tracing"
	"github.com/hertz-contrib/registry/etcd"
	"net"
	"time"
)

func main() {
	// init db
	dal.Init()

	// init jwt
	jwt.Init()

	// init errno
	// NOTE: only register error code when api server setup, since only parse error in api server
	errno.Init()

	// init snowflake id generator
	snowflake.Init()

	// init log
	log.InitHLogger()

	// init server
	v := conf.Init()

	etcdAddr := fmt.Sprintf("%s:%d", v.GetString("etcd.host"), v.GetInt("etcd.port"))
	r, err := etcd.NewEtcdRegistry([]string{etcdAddr})
	if err != nil {
		panic(err)
	}

	serverAddr := fmt.Sprintf("%s:%d", v.GetString("api-server.host"), v.GetInt("api-server.port"))
	addr, err := net.ResolveTCPAddr("tcp", serverAddr)
	if err != nil {
		panic(err)
	}

	p := provider.NewOpenTelemetryProvider(
		provider.WithServiceName(v.GetString("api-server.name")),
		provider.WithExportEndpoint(fmt.Sprintf("%s:%d", v.GetString("otlp-receiver.host"), v.GetInt("otlp-receiver.port"))),
		provider.WithInsecure(),
	)
	defer p.Shutdown(context.Background())

	tracer, cfg := tracing.NewServerTracer()
	h := server.New(
		server.WithHostPorts(serverAddr),
		server.WithTransport(netpoll.NewTransporter),
		server.WithExitWaitTime(time.Duration(v.GetInt("api-server.exit-wait-time"))*time.Second),
		server.WithRegistry(r, &registry.Info{
			ServiceName: v.GetString("api-server.name"),
			Addr:        addr,
		}),
		tracer)

	// set global middleware
	h.Use(
		// tracer
		tracing.ServerMiddleware(cfg),
		// access log
		func(c context.Context, ctx *app.RequestContext) {
			start := time.Now()
			ctx.Next(c)
			end := time.Now()
			latency := end.Sub(start).Microseconds
			hlog.Infof("status=%d cost=%d method=%s full_path=%s client_ip=%s host=%s",
				ctx.Response.StatusCode(), latency,
				ctx.Request.Header.Method(), ctx.Request.URI().PathOriginal(), ctx.ClientIP(), ctx.Request.Host())
		},
		// recovery
		recovery.Recovery(recovery.WithRecoveryHandler(
			func(ctx context.Context, c *app.RequestContext, err interface{}, stack []byte) {
				hlog.SystemLogger().CtxErrorf(ctx, "[Recovery] err=%v\nstack=%s", err, stack)
				c.JSON(consts.StatusInternalServerError, utils.H{
					"status_code": errno.ErrStatusInternalServerError,
					"status_msg":  fmt.Sprintf("[Recovery] err=%v\nstack=%s", err, stack),
				})
			},
		)),
		// gzip
		gzip.Gzip(gzip.DefaultCompression),
	)

	// set NoRoute handler
	h.NoRoute(func(c context.Context, ctx *app.RequestContext) {
		ctx.JSON(consts.StatusNotFound, map[string]interface{}{
			"status_code": errno.ErrStatusNotFound,
			"status_msg":  "no route",
		})
	})

	// set NoMethod handler
	h.NoMethod(func(c context.Context, ctx *app.RequestContext) {
		ctx.JSON(consts.StatusMethodNotAllowed, map[string]interface{}{
			"status_code": errno.ErrStatusMethodNotAllowed,
			"status_msg":  "no method",
		})
	})

	// register
	register(h)

	// run server
	h.Spin()
}
