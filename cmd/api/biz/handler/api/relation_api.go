// Code generated by hertz generator.

package api

import (
	"context"
	"github.com/bytecamp-galaxy/mini-tiktok/cmd/api/biz/jwt"
	"github.com/bytecamp-galaxy/mini-tiktok/cmd/api/biz/pack"
	"github.com/bytecamp-galaxy/mini-tiktok/internal/convert"
	"github.com/bytecamp-galaxy/mini-tiktok/internal/rpc"
	"github.com/bytecamp-galaxy/mini-tiktok/kitex_gen/relation"
	"github.com/bytecamp-galaxy/mini-tiktok/pkg/conf"
	"github.com/bytecamp-galaxy/mini-tiktok/pkg/errno"
	"github.com/bytecamp-galaxy/mini-tiktok/pkg/utils"
	"github.com/cloudwego/kitex/pkg/kerrors"
	"github.com/marmotedu/errors"

	api "github.com/bytecamp-galaxy/mini-tiktok/cmd/api/biz/model/api"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// RelationAction .
// @router /douyin/relation/action/ [POST]
// @description 关注操作
// @produce application/json
// @param q query api.RelationActionRequest true "relation action request"
// @success 200 {object} api.RelationActionResponse
func RelationAction(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.RelationActionRequest

	err = c.BindAndValidate(&req)
	if err != nil {
		pack.Error(c, errors.WithCode(errno.ErrBindAndValidation, err.Error()))
		return
	}

	// fetch user id from token
	id, ok := c.Get(jwt.IdentityKey)
	if !ok {
		pack.Error(c, errors.WithCode(errno.ErrParseToken, ""))
		return
	}

	userId := id.(int64)
	toUserId := req.ToUserId

	if userId == toUserId {
		pack.Error(c, errors.WithCode(errno.ErrBindAndValidation, "not allowed to follow yourself"))
		return
	}

	reqRPC := &relation.RelationActionRequest{
		UserId:     userId,
		ToUserId:   toUserId,
		ActionType: req.ActionType,
	}

	// set up connection with relation server
	v := conf.Init()
	cli, err := rpc.InitRelationClient(v.GetString("api-server.name"))
	if err != nil {
		pack.Error(c, errors.WithCode(errno.ErrClientRPCInit, err.Error()))
		return
	}

	_, err = (*cli).RelationAction(ctx, reqRPC)
	if err != nil {
		if bizErr, ok := kerrors.FromBizStatusError(err); ok {
			pack.Error(c, errors.WithCode(int(bizErr.BizStatusCode()), bizErr.BizMessage()))
			return
		} else {
			pack.Error(c, errors.WithCode(errno.ErrRPCLink, err.Error()))
			return
		}
	}

	resp := &api.RelationActionResponse{
		StatusCode: errno.ErrSuccess,
		StatusMsg:  utils.String(pack.SuccessStatusMessage),
	}

	c.JSON(consts.StatusOK, resp)
}

// RelationFollowList .
// @router /douyin/relation/follow/list/ [GET]
// @description 粉丝列表
// @produce application/json
// @param q query api.RelationFollowListRequest true "relation follow list request"
// @success 200 {object} api.RelationFollowListResponse
func RelationFollowList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.RelationFollowListRequest

	err = c.BindAndValidate(&req)
	if err != nil {
		pack.Error(c, errors.WithCode(errno.ErrBindAndValidation, err.Error()))
		return
	}

	// fetch user view id from token
	userViewId, ok := c.Get(jwt.IdentityKey)
	if !ok {
		pack.Error(c, errors.WithCode(errno.ErrParseToken, ""))
		return
	}

	reqRPC := &relation.RelationFollowListRequest{
		UserId:     req.UserId,
		UserViewId: userViewId.(int64),
	}

	// set up connection with relation server
	v := conf.Init()
	cli, err := rpc.InitRelationClient(v.GetString("api-server.name"))
	if err != nil {
		pack.Error(c, errors.WithCode(errno.ErrClientRPCInit, err.Error()))
		return
	}

	respRPC, err := (*cli).RelationFollowList(ctx, reqRPC)
	if err != nil {
		if bizErr, ok := kerrors.FromBizStatusError(err); ok {
			pack.Error(c, errors.WithCode(int(bizErr.BizStatusCode()), bizErr.BizMessage()))
			return
		} else {
			pack.Error(c, errors.WithCode(errno.ErrRPCLink, err.Error()))
			return
		}
	}

	list := make([]*api.User, len(respRPC.UserList))
	for i, u := range respRPC.UserList {
		list[i] = convert.UserConverterAPI(u)
	}

	resp := &api.RelationFollowListResponse{
		StatusCode: errno.ErrSuccess,
		StatusMsg:  utils.String(pack.SuccessStatusMessage),
		UserList:   list,
	}

	c.JSON(consts.StatusOK, resp)
}

// RelationFollowerList .
// @router /douyin/relation/follower/list/ [GET]
// @description 关注列表
// @produce application/json
// @param q query api.RelationFollowerListRequest true "relation follower list request"
// @success 200 {object} api.RelationFollowerListResponse
func RelationFollowerList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.RelationFollowerListRequest

	err = c.BindAndValidate(&req)
	if err != nil {
		pack.Error(c, errors.WithCode(errno.ErrBindAndValidation, err.Error()))
		return
	}

	// fetch user view id from token
	userViewId, ok := c.Get(jwt.IdentityKey)
	if !ok {
		pack.Error(c, errors.WithCode(errno.ErrParseToken, ""))
		return
	}

	reqRPC := &relation.RelationFollowerListRequest{
		UserId:     req.UserId,
		UserViewId: userViewId.(int64),
	}

	// set up connection with relation server
	v := conf.Init()
	cli, err := rpc.InitRelationClient(v.GetString("api-server.name"))
	if err != nil {
		pack.Error(c, errors.WithCode(errno.ErrClientRPCInit, err.Error()))
		return
	}

	respRPC, err := (*cli).RelationFollowerList(ctx, reqRPC)
	if err != nil {
		if bizErr, ok := kerrors.FromBizStatusError(err); ok {
			pack.Error(c, errors.WithCode(int(bizErr.BizStatusCode()), bizErr.BizMessage()))
			return
		} else {
			pack.Error(c, errors.WithCode(errno.ErrRPCLink, err.Error()))
			return
		}
	}

	list := make([]*api.User, len(respRPC.UserList))
	for i, u := range respRPC.UserList {
		list[i] = convert.UserConverterAPI(u)
	}

	resp := &api.RelationFollowerListResponse{
		StatusCode: errno.ErrSuccess,
		StatusMsg:  utils.String(pack.SuccessStatusMessage),
		UserList:   list,
	}

	c.JSON(consts.StatusOK, resp)
}
