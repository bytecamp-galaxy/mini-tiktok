// Code generated by hertz generator.

package api

import (
	"context"
	"github.com/bytecamp-galaxy/mini-tiktok/cmd/api/biz/jwt"
	"github.com/bytecamp-galaxy/mini-tiktok/cmd/api/biz/model/api"
	"github.com/bytecamp-galaxy/mini-tiktok/cmd/api/biz/pack"
	"github.com/bytecamp-galaxy/mini-tiktok/internal/convert"
	"github.com/bytecamp-galaxy/mini-tiktok/internal/rpc"
	"github.com/bytecamp-galaxy/mini-tiktok/kitex_gen/user"
	"github.com/bytecamp-galaxy/mini-tiktok/pkg/conf"
	"github.com/bytecamp-galaxy/mini-tiktok/pkg/errno"
	"github.com/bytecamp-galaxy/mini-tiktok/pkg/utils"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"github.com/cloudwego/kitex/pkg/kerrors"
	"github.com/marmotedu/errors"
)

// UserRegister .
// @router /douyin/user/register/ [POST]
// @description 用户注册：新用户注册时提供用户名，密码，昵称即可，用户名需要保证唯一，创建成功后返回用户 id 和权限 token
// @produce application/json
// @param q query api.UserRegisterRequest true "user register request"
// @success 200 {object} api.UserRegisterResponse
func UserRegister(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.UserRegisterRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.Error(c, errors.WithCode(errno.ErrBindAndValidation, err.Error()))
		return
	}

	// validate password
	err = utils.ValidatePassword(req.Password)
	if err != nil {
		pack.Error(c, errors.WithCode(errno.ErrPasswordInvalid, err.Error()))
		return
	}

	// set up connection with user server
	v := conf.Init()
	cli, err := rpc.InitUserClient(v.GetString("api-server.name"))
	if err != nil {
		pack.Error(c, errors.WithCode(errno.ErrClientRPCInit, err.Error()))
		return
	}

	// call rpc service
	reqRpc := &user.UserRegisterRequest{
		Username: req.Username,
		Password: req.Password,
	}

	respRpc, err := (*cli).UserRegister(ctx, reqRpc)
	if err != nil {
		if bizErr, ok := kerrors.FromBizStatusError(err); ok {
			pack.Error(c, errors.WithCode(int(bizErr.BizStatusCode()), bizErr.BizMessage()))
			return
		} else {
			pack.Error(c, errors.WithCode(errno.ErrRPCLink, err.Error()))
			return
		}
	}

	// generate token
	token, _, err := jwt.Middleware.TokenGenerator(respRpc.UserId)
	if err != nil {
		pack.Error(c, errors.WithCode(errno.ErrGenerateToken, err.Error()))
		return
	}

	// response to client
	resp := &api.UserRegisterResponse{
		StatusCode: errno.ErrSuccess,
		StatusMsg:  utils.String(pack.SuccessStatusMessage),
		UserId:     respRpc.UserId,
		Token:      token,
	}

	c.JSON(consts.StatusOK, resp)
}

// UserLogin .
// @router /douyin/user/login/ [POST]
// @description 用户登录：通过用户名和密码进行登录，登录成功后返回用户 id 和权限 token
// @produce application/json
// @param q query api.UserLoginRequest true "user login request"
// @success 200 {object} api.UserLoginResponse
func UserLogin(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.UserLoginRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.Error(c, errors.WithCode(errno.ErrBindAndValidation, err.Error()))
		return
	}

	// set up connection with user server
	v := conf.Init()
	cli, err := rpc.InitUserClient(v.GetString("api-server.name"))
	if err != nil {
		pack.Error(c, errors.WithCode(errno.ErrClientRPCInit, err.Error()))
		return
	}

	// call rpc service
	reqRpc := &user.UserLoginRequest{
		Username: req.Username,
		Password: req.Password,
	}

	respRpc, err := (*cli).UserLogin(ctx, reqRpc)
	if err != nil {
		if bizErr, ok := kerrors.FromBizStatusError(err); ok {
			pack.Error(c, errors.WithCode(int(bizErr.BizStatusCode()), bizErr.BizMessage()))
			return
		} else {
			pack.Error(c, errors.WithCode(errno.ErrRPCLink, err.Error()))
			return
		}
	}

	// generate token
	token, _, err := jwt.Middleware.TokenGenerator(respRpc.UserId)
	if err != nil {
		pack.Error(c, errors.WithCode(errno.ErrGenerateToken, err.Error()))
		return
	}

	// response to client
	resp := &api.UserLoginResponse{
		StatusCode: errno.ErrSuccess,
		StatusMsg:  utils.String(pack.SuccessStatusMessage),
		UserId:     respRpc.UserId,
		Token:      token,
	}

	c.JSON(consts.StatusOK, resp)
}

// UserQuery .
// @router /douyin/user/ [GET]
// @description 用户信息：获取用户的 id、昵称，如果实现社交部分的功能，还会返回关注数和粉丝数
// @produce application/json
// @param q query api.UserQueryRequest true "user query request"
// @success 200 {object} api.UserQueryResponse
func UserQuery(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.UserQueryRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.Error(c, errors.WithCode(errno.ErrBindAndValidation, err.Error()))
		return
	}

	// fetch user view id from token
	userViewId, ok := c.Get(jwt.IdentityKey)
	if !ok {
		pack.Error(c, errors.WithCode(errno.ErrParseToken, ""))
		return
	}

	// set up connection with user server
	v := conf.Init()
	cli, err := rpc.InitUserClient(v.GetString("api-server.name"))
	if err != nil {
		pack.Error(c, errors.WithCode(errno.ErrClientRPCInit, err.Error()))
		return
	}

	// call rpc service
	reqRpc := &user.UserQueryRequest{
		UserId:     req.UserId,
		UserViewId: userViewId.(int64),
	}

	respRpc, err := (*cli).UserQuery(ctx, reqRpc)
	if err != nil {
		if bizErr, ok := kerrors.FromBizStatusError(err); ok {
			pack.Error(c, errors.WithCode(int(bizErr.BizStatusCode()), bizErr.BizMessage()))
			return
		} else {
			pack.Error(c, errors.WithCode(errno.ErrRPCLink, err.Error()))
			return
		}
	}

	// response to client
	resp := &api.UserQueryResponse{
		StatusCode: errno.ErrSuccess,
		StatusMsg:  utils.String(pack.SuccessStatusMessage),
		User:       convert.UserConverterAPI(respRpc.User),
	}

	c.JSON(consts.StatusOK, resp)
}
