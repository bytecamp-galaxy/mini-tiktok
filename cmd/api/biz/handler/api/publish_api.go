// Code generated by hertz generator.

package api

import (
	"bytes"
	"context"
	"github.com/bytecamp-galaxy/mini-tiktok/cmd/api/biz/jwt"
	"github.com/bytecamp-galaxy/mini-tiktok/cmd/api/biz/model/api"
	"github.com/bytecamp-galaxy/mini-tiktok/cmd/api/biz/rpc"
	"github.com/bytecamp-galaxy/mini-tiktok/kitex_gen/publish"
	"github.com/bytecamp-galaxy/mini-tiktok/pkg/utils"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"io"
)

// PublishAction .
// @router /douyin/publish/action/ [POST]
func PublishAction(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.PublishActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	title := req.GetTitle()
	fileHeader, err := c.Request.FormFile("data")
	if err != nil {
		c.JSON(consts.StatusInternalServerError, &api.PublishActionResponse{
			StatusCode: 1,
			StatusMsg:  utils.String(".mp4 param encoding failed"),
		})
		return
	}

	// get .mp4 data
	file, err := fileHeader.Open()
	if err != nil {
		c.JSON(consts.StatusInternalServerError, &api.PublishActionResponse{
			StatusCode: 1,
			StatusMsg:  utils.String(".mp4 param encoding failed"),
		})
		return
	}
	defer file.Close()

	buf := bytes.NewBuffer(nil)
	if _, err := io.Copy(buf, file); err != nil {
		c.JSON(consts.StatusInternalServerError, &api.PublishActionResponse{
			StatusCode: 1,
			StatusMsg:  utils.String("copy bytes failed"),
		})
		return
	}

	// fetch user id from token
	id, ok := c.Get(jwt.IdentityKey)
	if !ok {
		c.JSON(consts.StatusInternalServerError, &api.PublishActionResponse{
			StatusCode: 1,
			StatusMsg:  utils.String(err.Error()),
		})
		return
	}

	// set up connection with publish server
	cli, err := rpc.InitPublishClient()
	if err != nil {
		c.JSON(consts.StatusInternalServerError, &api.PublishActionResponse{
			StatusCode: 1,
			StatusMsg:  utils.String(err.Error()),
		})
		return
	}

	// call rpc service
	reqRpc := &publish.PublishRequest{
		Uid:   id.(int64),
		Data:  buf.Bytes(),
		Title: title,
	}

	respRpc, err := (*cli).PublishVideo(ctx, reqRpc)
	if err != nil {
		c.JSON(consts.StatusInternalServerError, &api.PublishActionResponse{
			StatusCode: 1,
			StatusMsg:  utils.String(err.Error()),
		})
		return
	}

	// handle status code
	if respRpc.StatusCode != 0 {
		c.JSON(consts.StatusInternalServerError, &api.PublishActionResponse{
			StatusCode: respRpc.StatusCode,
			StatusMsg:  utils.String(*respRpc.StatusMsg),
		})
		return
	}

	resp := &api.PublishActionResponse{
		StatusCode: respRpc.StatusCode,
		StatusMsg:  utils.String(*respRpc.StatusMsg),
	}

	c.JSON(consts.StatusOK, resp)
}
