// Code generated by hertz generator.

package api

import (
	"context"
	"encoding/json"
	"github.com/bytecamp-galaxy/mini-tiktok/cmd/api/biz/jwt"
	"github.com/bytecamp-galaxy/mini-tiktok/cmd/api/biz/model/api"
	"github.com/bytecamp-galaxy/mini-tiktok/cmd/api/biz/pack"
	pack2 "github.com/bytecamp-galaxy/mini-tiktok/internal/pack"
	"github.com/bytecamp-galaxy/mini-tiktok/internal/rpc"
	"github.com/bytecamp-galaxy/mini-tiktok/kitex_gen/feed"
	"github.com/bytecamp-galaxy/mini-tiktok/pkg/conf"
	"github.com/bytecamp-galaxy/mini-tiktok/pkg/errno"
	"github.com/bytecamp-galaxy/mini-tiktok/pkg/utils"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"github.com/cloudwego/kitex/pkg/kerrors"
	"github.com/marmotedu/errors"
)

// GetFeed .
// @router /douyin/feed/ [GET]
func GetFeed(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.FeedRequest

	err = c.BindAndValidate(&req)
	if err != nil {
		pack.Error(c, errors.WithCode(errno.ErrBindAndValidation, err.Error()))
		return
	}

	// get the latest time.
	// if the latest time hasn't been passed as param, it's 0 by default.
	latestTime := req.GetLatestTime()
	uid := int64(-1)

	// if token is passed
	if req.GetToken() != api.FeedRequest_Token_DEFAULT {
		JwtImpl(ctx, c)
		// fetch user id from token
		userId, ok := c.Get(jwt.IdentityKey)
		if !ok {
			pack.Error(c, errors.WithCode(errno.ErrParseToken, pack.BrokenInvariantStatusMessage))
			return
		}
		uid = userId.(int64)
	}

	// set up connection with feed server
	v := conf.Init()
	cli, err := rpc.InitFeedClient(v.GetString("api-server.name"))
	if err != nil {
		pack.Error(c, errors.WithCode(errno.ErrClientRPCInit, err.Error()))
		return
	}

	// call rpc service
	reqRpc := &feed.FeedRequest{
		UserId:     uid,
		LatestTime: &latestTime,
	}

	respRpc, err := (*cli).GetFeed(ctx, reqRpc)
	if err != nil {
		if bizErr, ok := kerrors.FromBizStatusError(err); ok {
			e := errors.WithCode(int(bizErr.BizStatusCode()), bizErr.BizMessage())
			pack.Error(c, errors.WrapC(e, errno.ErrRPCProcess, ""))
			return
		} else {
			// assume
			pack.Error(c, errors.WithCode(errno.ErrRPCLink, err.Error()))
			return
		}
	}

	// convert model.Videos to feed.Videos
	respVideos := make([]*api.Video, len(respRpc.VideoList))
	for i, video := range respRpc.VideoList {
		respVideos[i] = pack2.VideoConverterAPI(video)
	}

	// response to client
	resp := &api.FeedResponse{
		StatusCode: errno.ErrSuccess,
		StatusMsg:  utils.String(pack.SuccessStatusMessage),
		VideoList:  respVideos,
		NextTime:   respRpc.NextTime,
	}

	c.JSON(consts.StatusOK, resp)
}

func JwtImpl(ctx context.Context, c *app.RequestContext) {
	claims, err := jwt.Middleware.GetClaimsFromJWT(ctx, c)
	if err != nil {
		pack.Error(c, errors.WithCode(errno.ErrTokenInvalid, pack.BrokenInvariantStatusMessage))
		return
	}

	switch v := claims["exp"].(type) {
	case nil:
		pack.Error(c, errors.WithCode(errno.ErrTokenInvalid, pack.BrokenInvariantStatusMessage))
		return
	case float64:
		if int64(v) < jwt.Middleware.TimeFunc().Unix() {
			pack.Error(c, errors.WithCode(errno.ErrTokenInvalid, pack.BrokenInvariantStatusMessage))
			return
		}
	case json.Number:
		n, err := v.Int64()
		if err != nil {
			pack.Error(c, errors.WithCode(errno.ErrTokenInvalid, pack.BrokenInvariantStatusMessage))
			return
		}
		if n < jwt.Middleware.TimeFunc().Unix() {
			pack.Error(c, errors.WithCode(errno.ErrTokenInvalid, pack.BrokenInvariantStatusMessage))
			return
		}
	default:
		pack.Error(c, errors.WithCode(errno.ErrTokenInvalid, pack.BrokenInvariantStatusMessage))
		return
	}

	c.Set("JWT_PAYLOAD", claims)
	identity := jwt.Middleware.IdentityHandler(ctx, c)

	if identity != nil {
		c.Set(jwt.Middleware.IdentityKey, identity)
	}

	if !jwt.Middleware.Authorizator(identity, ctx, c) {
		pack.Error(c, errors.WithCode(errno.ErrTokenInvalid, pack.BrokenInvariantStatusMessage))
		return
	}

	c.Next(ctx)
}
