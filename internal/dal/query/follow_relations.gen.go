// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/bytecamp-galaxy/mini-tiktok/internal/dal/model"
)

func newFollowRelation(db *gorm.DB, opts ...gen.DOOption) followRelation {
	_followRelation := followRelation{}

	_followRelation.followRelationDo.UseDB(db, opts...)
	_followRelation.followRelationDo.UseModel(&model.FollowRelation{})

	tableName := _followRelation.followRelationDo.TableName()
	_followRelation.ALL = field.NewAsterisk(tableName)
	_followRelation.ID = field.NewInt64(tableName, "id")
	_followRelation.UserID = field.NewInt64(tableName, "user_id")
	_followRelation.ToUserID = field.NewInt64(tableName, "to_user_id")
	_followRelation.User = followRelationBelongsToUser{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("User", "model.User"),
	}

	_followRelation.ToUser = followRelationBelongsToToUser{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("ToUser", "model.User"),
	}

	_followRelation.fillFieldMap()

	return _followRelation
}

type followRelation struct {
	followRelationDo

	ALL      field.Asterisk
	ID       field.Int64
	UserID   field.Int64
	ToUserID field.Int64
	User     followRelationBelongsToUser

	ToUser followRelationBelongsToToUser

	fieldMap map[string]field.Expr
}

func (f followRelation) Table(newTableName string) *followRelation {
	f.followRelationDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f followRelation) As(alias string) *followRelation {
	f.followRelationDo.DO = *(f.followRelationDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *followRelation) updateTableName(table string) *followRelation {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt64(table, "id")
	f.UserID = field.NewInt64(table, "user_id")
	f.ToUserID = field.NewInt64(table, "to_user_id")

	f.fillFieldMap()

	return f
}

func (f *followRelation) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *followRelation) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 5)
	f.fieldMap["id"] = f.ID
	f.fieldMap["user_id"] = f.UserID
	f.fieldMap["to_user_id"] = f.ToUserID

}

func (f followRelation) clone(db *gorm.DB) followRelation {
	f.followRelationDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f followRelation) replaceDB(db *gorm.DB) followRelation {
	f.followRelationDo.ReplaceDB(db)
	return f
}

type followRelationBelongsToUser struct {
	db *gorm.DB

	field.RelationField
}

func (a followRelationBelongsToUser) Where(conds ...field.Expr) *followRelationBelongsToUser {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a followRelationBelongsToUser) WithContext(ctx context.Context) *followRelationBelongsToUser {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a followRelationBelongsToUser) Model(m *model.FollowRelation) *followRelationBelongsToUserTx {
	return &followRelationBelongsToUserTx{a.db.Model(m).Association(a.Name())}
}

type followRelationBelongsToUserTx struct{ tx *gorm.Association }

func (a followRelationBelongsToUserTx) Find() (result *model.User, err error) {
	return result, a.tx.Find(&result)
}

func (a followRelationBelongsToUserTx) Append(values ...*model.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a followRelationBelongsToUserTx) Replace(values ...*model.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a followRelationBelongsToUserTx) Delete(values ...*model.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a followRelationBelongsToUserTx) Clear() error {
	return a.tx.Clear()
}

func (a followRelationBelongsToUserTx) Count() int64 {
	return a.tx.Count()
}

type followRelationBelongsToToUser struct {
	db *gorm.DB

	field.RelationField
}

func (a followRelationBelongsToToUser) Where(conds ...field.Expr) *followRelationBelongsToToUser {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a followRelationBelongsToToUser) WithContext(ctx context.Context) *followRelationBelongsToToUser {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a followRelationBelongsToToUser) Model(m *model.FollowRelation) *followRelationBelongsToToUserTx {
	return &followRelationBelongsToToUserTx{a.db.Model(m).Association(a.Name())}
}

type followRelationBelongsToToUserTx struct{ tx *gorm.Association }

func (a followRelationBelongsToToUserTx) Find() (result *model.User, err error) {
	return result, a.tx.Find(&result)
}

func (a followRelationBelongsToToUserTx) Append(values ...*model.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a followRelationBelongsToToUserTx) Replace(values ...*model.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a followRelationBelongsToToUserTx) Delete(values ...*model.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a followRelationBelongsToToUserTx) Clear() error {
	return a.tx.Clear()
}

func (a followRelationBelongsToToUserTx) Count() int64 {
	return a.tx.Count()
}

type followRelationDo struct{ gen.DO }

type IFollowRelationDo interface {
	gen.SubQuery
	Debug() IFollowRelationDo
	WithContext(ctx context.Context) IFollowRelationDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFollowRelationDo
	WriteDB() IFollowRelationDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFollowRelationDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFollowRelationDo
	Not(conds ...gen.Condition) IFollowRelationDo
	Or(conds ...gen.Condition) IFollowRelationDo
	Select(conds ...field.Expr) IFollowRelationDo
	Where(conds ...gen.Condition) IFollowRelationDo
	Order(conds ...field.Expr) IFollowRelationDo
	Distinct(cols ...field.Expr) IFollowRelationDo
	Omit(cols ...field.Expr) IFollowRelationDo
	Join(table schema.Tabler, on ...field.Expr) IFollowRelationDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFollowRelationDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFollowRelationDo
	Group(cols ...field.Expr) IFollowRelationDo
	Having(conds ...gen.Condition) IFollowRelationDo
	Limit(limit int) IFollowRelationDo
	Offset(offset int) IFollowRelationDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFollowRelationDo
	Unscoped() IFollowRelationDo
	Create(values ...*model.FollowRelation) error
	CreateInBatches(values []*model.FollowRelation, batchSize int) error
	Save(values ...*model.FollowRelation) error
	First() (*model.FollowRelation, error)
	Take() (*model.FollowRelation, error)
	Last() (*model.FollowRelation, error)
	Find() ([]*model.FollowRelation, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FollowRelation, err error)
	FindInBatches(result *[]*model.FollowRelation, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FollowRelation) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFollowRelationDo
	Assign(attrs ...field.AssignExpr) IFollowRelationDo
	Joins(fields ...field.RelationField) IFollowRelationDo
	Preload(fields ...field.RelationField) IFollowRelationDo
	FirstOrInit() (*model.FollowRelation, error)
	FirstOrCreate() (*model.FollowRelation, error)
	FindByPage(offset int, limit int) (result []*model.FollowRelation, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFollowRelationDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f followRelationDo) Debug() IFollowRelationDo {
	return f.withDO(f.DO.Debug())
}

func (f followRelationDo) WithContext(ctx context.Context) IFollowRelationDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f followRelationDo) ReadDB() IFollowRelationDo {
	return f.Clauses(dbresolver.Read)
}

func (f followRelationDo) WriteDB() IFollowRelationDo {
	return f.Clauses(dbresolver.Write)
}

func (f followRelationDo) Session(config *gorm.Session) IFollowRelationDo {
	return f.withDO(f.DO.Session(config))
}

func (f followRelationDo) Clauses(conds ...clause.Expression) IFollowRelationDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f followRelationDo) Returning(value interface{}, columns ...string) IFollowRelationDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f followRelationDo) Not(conds ...gen.Condition) IFollowRelationDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f followRelationDo) Or(conds ...gen.Condition) IFollowRelationDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f followRelationDo) Select(conds ...field.Expr) IFollowRelationDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f followRelationDo) Where(conds ...gen.Condition) IFollowRelationDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f followRelationDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IFollowRelationDo {
	return f.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (f followRelationDo) Order(conds ...field.Expr) IFollowRelationDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f followRelationDo) Distinct(cols ...field.Expr) IFollowRelationDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f followRelationDo) Omit(cols ...field.Expr) IFollowRelationDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f followRelationDo) Join(table schema.Tabler, on ...field.Expr) IFollowRelationDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f followRelationDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFollowRelationDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f followRelationDo) RightJoin(table schema.Tabler, on ...field.Expr) IFollowRelationDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f followRelationDo) Group(cols ...field.Expr) IFollowRelationDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f followRelationDo) Having(conds ...gen.Condition) IFollowRelationDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f followRelationDo) Limit(limit int) IFollowRelationDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f followRelationDo) Offset(offset int) IFollowRelationDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f followRelationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFollowRelationDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f followRelationDo) Unscoped() IFollowRelationDo {
	return f.withDO(f.DO.Unscoped())
}

func (f followRelationDo) Create(values ...*model.FollowRelation) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f followRelationDo) CreateInBatches(values []*model.FollowRelation, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f followRelationDo) Save(values ...*model.FollowRelation) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f followRelationDo) First() (*model.FollowRelation, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FollowRelation), nil
	}
}

func (f followRelationDo) Take() (*model.FollowRelation, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FollowRelation), nil
	}
}

func (f followRelationDo) Last() (*model.FollowRelation, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FollowRelation), nil
	}
}

func (f followRelationDo) Find() ([]*model.FollowRelation, error) {
	result, err := f.DO.Find()
	return result.([]*model.FollowRelation), err
}

func (f followRelationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FollowRelation, err error) {
	buf := make([]*model.FollowRelation, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f followRelationDo) FindInBatches(result *[]*model.FollowRelation, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f followRelationDo) Attrs(attrs ...field.AssignExpr) IFollowRelationDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f followRelationDo) Assign(attrs ...field.AssignExpr) IFollowRelationDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f followRelationDo) Joins(fields ...field.RelationField) IFollowRelationDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f followRelationDo) Preload(fields ...field.RelationField) IFollowRelationDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f followRelationDo) FirstOrInit() (*model.FollowRelation, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FollowRelation), nil
	}
}

func (f followRelationDo) FirstOrCreate() (*model.FollowRelation, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FollowRelation), nil
	}
}

func (f followRelationDo) FindByPage(offset int, limit int) (result []*model.FollowRelation, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f followRelationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f followRelationDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f followRelationDo) Delete(models ...*model.FollowRelation) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *followRelationDo) withDO(do gen.Dao) *followRelationDo {
	f.DO = *do.(*gen.DO)
	return f
}
